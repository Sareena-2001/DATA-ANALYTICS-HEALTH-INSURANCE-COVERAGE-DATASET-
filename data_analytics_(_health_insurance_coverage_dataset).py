# -*- coding: utf-8 -*-
"""DATA ANALYTICS ( HEALTH INSURANCE COVERAGE DATASET)

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m2W9W1e_XDtKCYwLyaYPZf0y6JRjwucf

# Task
THIS IS A CSV FOR Health Insurance Coverage,ENSURE PROPER DATA CLEANING, CARRY OUT FULL FLEDGE DATA ANALYSIS WITH BEAUTIFUL VISUALIZATIONS AND RESULTS

Here is all the data you need:
"states.csv"

## Data loading

### Subtask:
Load the "states.csv" file into a pandas DataFrame.

**Reasoning**:
Load the "states.csv" file into a pandas DataFrame and display its first few rows and shape.
"""

import pandas as pd

try:
    df_states = pd.read_csv('states.csv')
    display(df_states.head())
    print(df_states.shape)
except FileNotFoundError:
    print("Error: 'states.csv' not found. Please ensure the file exists in the current directory.")
except Exception as e:
    print(f"An error occurred: {e}")

"""## Data exploration

### Subtask:
Explore the dataset to understand its structure, identify missing values, data types of each column, and the distribution of key variables. Determine the shape of the data and look for potential outliers.

**Reasoning**:
Examine the data types, missing values, descriptive statistics, and distributions of key variables in the DataFrame.  Also check for duplicates and the overall shape of the data.
"""

# Check data types
print(df_states.dtypes)

# Identify missing values
print(df_states.isnull().sum())

# Descriptive statistics for numerical columns
numerical_cols = df_states.select_dtypes(include=['number'])
print(numerical_cols.describe())

# Analyze distribution of key variables
import matplotlib.pyplot as plt
plt.figure(figsize=(15,10))

plt.subplot(2,2,1)
plt.hist(df_states['Uninsured Rate (2010)'].astype(str).str.rstrip('%').astype('float'), bins=10)
plt.title('Distribution of Uninsured Rate (2010)')

plt.subplot(2,2,2)
plt.hist(df_states['Uninsured Rate (2015)'].astype(str).str.rstrip('%').astype('float'), bins=10)
plt.title('Distribution of Uninsured Rate (2015)')


plt.subplot(2,2,3)
plt.hist(df_states['Health Insurance Coverage Change (2010-2015)'], bins=10)
plt.title('Distribution of Health Insurance Coverage Change (2010-2015)')

plt.subplot(2,2,4)
plt.hist(df_states['Medicaid Enrollment Change (2013-2016)'], bins=10)
plt.title('Distribution of Medicaid Enrollment Change (2013-2016)')
plt.tight_layout()
plt.show()


# Check for duplicates
print(f"Number of duplicate rows: {df_states.duplicated().sum()}")

# Shape of the DataFrame
print(f"Shape of the DataFrame: {df_states.shape}")

"""## Data cleaning

### Subtask:
Clean the data by handling missing values and outliers.

**Reasoning**:
Impute the missing value in 'Medicaid Enrollment Change (2013-2016)' using the median, handle outliers in specified columns using winsorizing, convert 'Uninsured Rate' columns to numeric, and remove duplicates.
"""

# Impute missing value in 'Medicaid Enrollment Change (2013-2016)' with the median
median_enrollment_change = df_states['Medicaid Enrollment Change (2013-2016)'].median()
df_states['Medicaid Enrollment Change (2013-2016)'].fillna(median_enrollment_change, inplace=True)

# Handle outliers using winsorizing
from scipy.stats.mstats import winsorize
columns_to_winsorize = ['Health Insurance Coverage Change (2010-2015)',
                        'Employer Health Insurance Coverage (2015)',
                        'Marketplace Health Insurance Coverage (2016)',
                        'Marketplace Tax Credits (2016)']

for col in columns_to_winsorize:
    df_states[col] = winsorize(df_states[col], limits=[0.05, 0.05])

# Convert 'Uninsured Rate' columns to numeric, coercing errors to NaN
for col in ['Uninsured Rate (2010)', 'Uninsured Rate (2015)', 'Uninsured Rate Change (2010-2015)']:
    df_states[col] = pd.to_numeric(df_states[col].astype(str).str.rstrip('%'), errors='coerce')

# Remove duplicate rows
df_states.drop_duplicates(inplace=True)

# Display the cleaned dataframe
display(df_states.head())

"""**Reasoning**:
Fix the chained assignment warning and regenerate the code block.


"""

# Impute missing value in 'Medicaid Enrollment Change (2013-2016)' with the median
median_enrollment_change = df_states['Medicaid Enrollment Change (2013-2016)'].median()
df_states['Medicaid Enrollment Change (2013-2016)'] = df_states['Medicaid Enrollment Change (2013-2016)'].fillna(median_enrollment_change)

# Handle outliers using winsorizing
from scipy.stats.mstats import winsorize
columns_to_winsorize = ['Health Insurance Coverage Change (2010-2015)',
                        'Employer Health Insurance Coverage (2015)',
                        'Marketplace Health Insurance Coverage (2016)',
                        'Marketplace Tax Credits (2016)']

for col in columns_to_winsorize:
    df_states[col] = winsorize(df_states[col], limits=[0.05, 0.05])

# Convert 'Uninsured Rate' columns to numeric, coercing errors to NaN
for col in ['Uninsured Rate (2010)', 'Uninsured Rate (2015)', 'Uninsured Rate Change (2010-2015)']:
    df_states[col] = pd.to_numeric(df_states[col].astype(str).str.rstrip('%'), errors='coerce')

# Remove duplicate rows
df_states.drop_duplicates(inplace=True)

# Display the cleaned dataframe
display(df_states.head())

"""## Data wrangling

### Subtask:
Data Wrangling and Feature Engineering

**Reasoning**:
Create new features, aggregate data by state, ensure correct data types, and consider scaling.
"""

# Calculate percentage change in uninsured rates
df_states['Uninsured Rate Change (%)'] = ((df_states['Uninsured Rate (2015)'] - df_states['Uninsured Rate (2010)']) / df_states['Uninsured Rate (2010)']) * 100

# Calculate percentage change in Medicaid enrollment
df_states['Medicaid Enrollment Change (%)'] = ((df_states['Medicaid Enrollment (2016)'] - df_states['Medicaid Enrollment (2013)']) / df_states['Medicaid Enrollment (2013)']) * 100

# Create an indicator variable for Medicaid expansion
df_states['Medicaid Expansion Indicator'] = df_states['State Medicaid Expansion (2016)'].astype(int)

# Aggregate data by state
state_summary = df_states.groupby('State').agg({
    'Uninsured Rate (2010)': ['mean', 'median', 'std'],
    'Uninsured Rate (2015)': ['mean', 'median', 'std'],
    'Uninsured Rate Change (%)': ['mean', 'median', 'std'],
    'Medicaid Enrollment Change (%)': ['mean', 'median', 'std'],
    'Medicaid Expansion Indicator': ['mean']  # Proportion of expansion
})

# Flatten multi-level column index
state_summary.columns = ['_'.join(col).strip() for col in state_summary.columns.values]

# Display the aggregated data
display(state_summary.head())


# Ensure correct data types (already handled in previous steps)

# Consider scaling (not necessary for this analysis)

"""**Reasoning**:
The previous code block successfully created the new features and aggregated the data. However, some standard deviations are NaN because there is only one data point for each state.  We need to address this and complete the subtask.


"""

# Recalculate aggregations, handling standard deviation for single-state groups
state_summary = df_states.groupby('State').agg({
    'Uninsured Rate (2010)': ['mean', 'median'],
    'Uninsured Rate (2015)': ['mean', 'median'],
    'Uninsured Rate Change (%)': ['mean', 'median'],
    'Medicaid Enrollment Change (%)': ['mean', 'median'],
    'Medicaid Expansion Indicator': ['mean']
})

# Rename columns for clarity
state_summary.columns = ['_'.join(col).strip() for col in state_summary.columns.values]

# Display the corrected aggregated data
display(state_summary)

# No scaling is needed for this type of analysis, so we can finish.

"""## Data analysis

### Subtask:
Analyze the aggregated state-level data to identify trends and patterns in health insurance coverage.

**Reasoning**:
Analyze the `state_summary` DataFrame to identify trends and patterns in health insurance coverage by calculating correlations and comparing groups based on Medicaid expansion status.
"""

# Calculate correlations
correlations = state_summary[[
    'Uninsured Rate (2010)_mean', 'Uninsured Rate (2015)_mean',
    'Uninsured Rate Change (%)_mean',
    'Medicaid Enrollment Change (%)_mean',
    'Medicaid Expansion Indicator_mean'
]].corr()
display(correlations)

# Compare groups based on Medicaid expansion
expanded_states = state_summary[state_summary['Medicaid Expansion Indicator_mean'] == 1]
non_expanded_states = state_summary[state_summary['Medicaid Expansion Indicator_mean'] == 0]

print("\nExpanded States:")
print(expanded_states[[
    'Uninsured Rate (2010)_mean', 'Uninsured Rate (2015)_mean',
    'Uninsured Rate Change (%)_mean'
]].describe())

print("\nNon-Expanded States:")
print(non_expanded_states[[
    'Uninsured Rate (2010)_mean', 'Uninsured Rate (2015)_mean',
    'Uninsured Rate Change (%)_mean'
]].describe())

"""## Data visualization

### Subtask:
Visualize the key findings from the data analysis.

**Reasoning**:
Visualize the key findings using heatmap, box plots, bar chart, and scatter plot.
"""

import matplotlib.pyplot as plt
import seaborn as sns

# 1. Heatmap of correlation matrix
plt.figure(figsize=(8, 6))
sns.heatmap(correlations, annot=True, cmap='coolwarm', fmt=".2f")
plt.title('Correlation Matrix of Key Variables')
plt.show()

# 2. Box plots of uninsured rate change by Medicaid expansion
plt.figure(figsize=(8, 6))
sns.boxplot(x='Medicaid Expansion Indicator_mean',
            y='Uninsured Rate Change (%)_mean',
            data=state_summary, palette="Set2")
plt.title('Uninsured Rate Change by Medicaid Expansion')
plt.xlabel('Medicaid Expansion (1=Expanded, 0=Not Expanded)')
plt.ylabel('Uninsured Rate Change (%)')
plt.show()

# 3. Bar chart of average uninsured rate in 2010 and 2015
plt.figure(figsize=(12, 6))
plt.subplot(1, 2, 1)
expanded_states[['Uninsured Rate (2010)_mean', 'Uninsured Rate (2015)_mean']].mean().plot(kind='bar', color=['skyblue', 'coral'])
plt.title('Average Uninsured Rate (Expanded Medicaid States)')
plt.ylabel('Uninsured Rate (%)')

plt.subplot(1, 2, 2)
non_expanded_states[['Uninsured Rate (2010)_mean', 'Uninsured Rate (2015)_mean']].mean().plot(kind='bar', color=['skyblue', 'coral'])
plt.title('Average Uninsured Rate (Non-Expanded Medicaid States)')
plt.ylabel('Uninsured Rate (%)')
plt.tight_layout()
plt.show()

# 4. Scatter plot of uninsured rate (2010) vs. uninsured rate change (%)
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Uninsured Rate (2010)_mean',
                y='Uninsured Rate Change (%)_mean',
                hue='Medicaid Expansion Indicator_mean',
                data=state_summary, palette="viridis")
plt.title('Uninsured Rate (2010) vs. Uninsured Rate Change')
plt.xlabel('Uninsured Rate (2010)')
plt.ylabel('Uninsured Rate Change (%)')
plt.show()

"""## Summary:

### Q&A
* **What is the impact of Medicaid expansion on the uninsured rate?** States that expanded Medicaid experienced a significantly larger reduction in their uninsured rates compared to states that did not expand Medicaid. The average uninsured rate change for expanded states was -43.99%, while for non-expanded states it was -30.33%.

### Data Analysis Key Findings
* **Missing Value Imputation:** A single missing value in the 'Medicaid Enrollment Change (2013-2016)' column was imputed using the median value.
* **Outlier Handling:** Outliers in several columns ('Health Insurance Coverage Change (2010-2015)', 'Employer Health Insurance Coverage (2015)', 'Marketplace Health Insurance Coverage (2016)', and 'Marketplace Tax Credits (2016)') were handled using winsorizing with a 5% limit on both ends of the distribution.
* **Correlation Analysis:** A strong positive correlation was observed between uninsured rates in 2010 and 2015. A negative correlation was found between Medicaid expansion and the uninsured rate in 2015 and the change in uninsured rates, indicating that Medicaid expansion is associated with a decrease in the uninsured population.
* **Medicaid Expansion Impact:** States with Medicaid expansion had a substantially larger decrease (-43.99\\%) in their uninsured population compared to states without expansion (-30.33\\%).

### Insights or Next Steps
* Medicaid expansion appears to be significantly correlated with a reduction in the uninsured rate. Further investigation could explore the causal relationship between the two.
* Investigate the potential impact of other factors (e.g., economic conditions, state policies) on health insurance coverage changes.

"""